% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{Plot}
\alias{Plot}
\alias{average}
\alias{optimal}
\alias{arms}
\alias{do_plot}
\alias{gg_color_hue}
\alias{check_history_data}
\title{Plot}
\description{
The R6 class \code{Plot} generates plots from on \code{History} data.
It is usually actually invoked by calling the generic \code{plot(h)}, where \code{h}
is an \code{History} class instance.
}
\section{Usage}{

\preformatted{
Plot <- Plot$new()
}
}

\section{Methods}{


\describe{

\item{\code{cumulative(history,...)}}{
Writes a plot of cumulative regret or reward (depending on parameter regret=TRUE/FALSE)
over time.
}
\item{\code{average(history,...)}}{
Writes a plot of average regret or reward (depending on parameter regret=TRUE/FALSE)
over time.
}
\item{\code{optimal(history,...)}}{
Writes a plot of the percentage the optimal arm was chosen over time.
}
\item{\code{arms(history),...}}{
Writes a plot of the ratio with which each arm of a simulation was chosen over time.
If multiple agents are run, only plots the arm plot of the first agent.
}
}
}

\section{Plot method arguments}{


\describe{
\item{\code{regret}}{
\code{(logical, TRUE)} If regret is TRUE, regret will be plotted on the y-axis.
When regret is set to FALSE, reward will be plotted on the y-axis.
}
\item{\code{rate}}{
(\code{logical, TRUE)} If rate is TRUE, the rate of the regret or reward is plotted.
}
\item{\code{no_par}}{
\code{(logical, FALSE)} If no_par is TRUE, Plot() does not set or adjust plotting parameters.
This makes it possible to set your own plotting parameters, for instance, when position multiple
Plots in a no_par.
}
\item{\code{legend}}{
\code{(logical, TRUE)} Print the legend.
}
\item{\code{legend_title}}{
\code{(character , NULL)} Set a legend title.
}
\item{\code{legend_labels}}{
\code{(list , NULL)} Set legend labels to custom values as specificed in this list.
}
\item{\code{legend_border}}{
\code{(logical , NULL)} Set a legend title.
}
\item{\code{xlim}}{
\code{(c(integer,integer), NULL)} Set x-axis limits.
}
\item{\code{xlim}}{
\code{(c(integer,integer), NULL)} Set y-axis limits.
}
\item{\code{use_colors}}{
\code{(logical, TRUE)} If use_colors is set to FALSE, plots will be in grayscale.
Otherwise, plots will make use of a color palette.
}
\item{\code{ci}}{
\code{(logical, NULL)} If ci is TRUE, Plot() will display 95% confidence intervals.
}
\item{\code{step_size}}{
\code{(integer, NULL)} Plot only for every every t%%step_size==0
}
\item{\code{start_step}}{
\code{(integer, NULL)} Start plotting at t=start_step
}
\item{\code{color_step}}{
\code{(integer, 1)} Linecharts will cycle through agents/color_step colors.
}
\item{\code{color_step}}{
\code{(integer, 1)} Linecharts will cycle through agents/lty_step line types
}
\item{\code{lwd}}{
\code{(integer, 1)} Linecharts will be of lwd width.
}
}
}

\seealso{
Core contextual classes: \code{\link{Bandit}}, \code{\link{Policy}}, \code{\link{Simulator}},
\code{\link{Agent}}, \code{\link{History}}, \code{\link{Plot}}

Bandit subclass examples: \code{\link{BasicBandit}}, \code{\link{ContextualBandit}},  \code{\link{LiSamplingOfflineBandit}}

Policy subclass examples: \code{\link{EpsilonGreedyPolicy}}, \code{\link{ContextualThompsonSamplingPolicy}}
}
